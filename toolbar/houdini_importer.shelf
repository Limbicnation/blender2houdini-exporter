<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="houdini_importer" label="Houdini_Importer">
    <memberTool name="reload_model"/>
    <memberTool name="import_as_new_geometry"/>
  </toolshelf>

  <tool name="reload_model" label="Reload_Model" icon="$HOME/houdini19.5/config/Icons/reload_model.png">
    <script scriptType="python"><![CDATA[import hou
import platform

def create_and_reload_file_node():
    # Get the 'geo1' node
    geo1_node = hou.node('/obj/geo1')

    # Create a new file node inside 'geo1'
    file_node = geo1_node.createNode('file')

    # Define the path to your FBX file based on the operating system
    if platform.system() == 'Windows':
        path = 'I:/Temp_geo/model.fbx'
    elif platform.system() == 'Linux':
        path = '/home/ws-ml/Temp_geo/model.fbx'
    else:
        raise OSError("Unsupported operating system.")

    # Set the path parameter of the file node to the FBX file
    file_node.parm('file').set(path)

    # Reload the file on the file node
    file_node.parm('reload').pressButton()

    # Set the display flag to the newly created file node
    file_node.setDisplayFlag(True)

if __name__ == "__main__":
    create_and_reload_file_node()
]]></script>
  </tool>

  <tool name="import_as_new_geometry" label="Import_as_New_Geometry" icon="$HOME/houdini19.5/config/Icons/Import_new_model.png">
    <script scriptType="python"><![CDATA[import hou
import platform

# Define the 'geo1' node
geo1_node = hou.node('/obj/geo1')

# Create a new file node inside 'geo1'
file_node = geo1_node.createNode('file')

# Define the path to your FBX file based on the operating system
if platform.system() == 'Windows':
    path = 'I:/Temp_geo/model.fbx'
elif platform.system() == 'Linux':
    path = '/home/ws-ml/Temp_geo/model.fbx'
else:
    raise OSError("Unsupported operating system.")

# Set the path parameter of the file node to the FBX file
file_node.parm('file').set(path)

# Reload the file on the file node
try:
    file_node.parm('reload').pressButton()
except hou.OperationFailed as e:
    print(f"Failed to reload the file: {e}")

# Set the display flag to the newly created file node
file_node.setDisplayFlag(True)
]]></script>
  </tool>
</shelfDocument>
